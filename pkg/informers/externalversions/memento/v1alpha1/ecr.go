/*
Copyright 2017 Gustavo Hoirisch.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	ecr_v1alpha1 "github.com/gugahoi/memento/pkg/apis/ecr/v1alpha1"
	client "github.com/gugahoi/memento/pkg/client"
	internalinterfaces "github.com/gugahoi/memento/pkg/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/gugahoi/memento/pkg/listers/memento/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// ECRInformer provides access to a shared informer and lister for
// ECRs.
type ECRInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ECRLister
}

type eCRInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewECRInformer constructs a new informer for ECR type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewECRInformer(client client.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.MementoV1alpha1().ECRs(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.MementoV1alpha1().ECRs(namespace).Watch(options)
			},
		},
		&ecr_v1alpha1.ECR{},
		resyncPeriod,
		indexers,
	)
}

func defaultECRInformer(client client.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewECRInformer(client, v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *eCRInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&ecr_v1alpha1.ECR{}, defaultECRInformer)
}

func (f *eCRInformer) Lister() v1alpha1.ECRLister {
	return v1alpha1.NewECRLister(f.Informer().GetIndexer())
}
