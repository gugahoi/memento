/*
Copyright 2017 Gustavo Hoirisch.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/gugahoi/memento/pkg/apis/ecr/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ECRLister helps list ECRs.
type ECRLister interface {
	// List lists all ECRs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ECR, err error)
	// ECRs returns an object that can list and get ECRs.
	ECRs(namespace string) ECRNamespaceLister
	ECRListerExpansion
}

// eCRLister implements the ECRLister interface.
type eCRLister struct {
	indexer cache.Indexer
}

// NewECRLister returns a new ECRLister.
func NewECRLister(indexer cache.Indexer) ECRLister {
	return &eCRLister{indexer: indexer}
}

// List lists all ECRs in the indexer.
func (s *eCRLister) List(selector labels.Selector) (ret []*v1alpha1.ECR, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ECR))
	})
	return ret, err
}

// ECRs returns an object that can list and get ECRs.
func (s *eCRLister) ECRs(namespace string) ECRNamespaceLister {
	return eCRNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ECRNamespaceLister helps list and get ECRs.
type ECRNamespaceLister interface {
	// List lists all ECRs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ECR, err error)
	// Get retrieves the ECR from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ECR, error)
	ECRNamespaceListerExpansion
}

// eCRNamespaceLister implements the ECRNamespaceLister
// interface.
type eCRNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ECRs in the indexer for a given namespace.
func (s eCRNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ECR, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ECR))
	})
	return ret, err
}

// Get retrieves the ECR from the indexer for a given namespace and name.
func (s eCRNamespaceLister) Get(name string) (*v1alpha1.ECR, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ecr"), name)
	}
	return obj.(*v1alpha1.ECR), nil
}
