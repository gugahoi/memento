/*
Copyright 2017 Gustavo Hoirisch.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	registry_v1alpha1 "github.com/gugahoi/memento/pkg/apis/registry/v1alpha1"
	versioned "github.com/gugahoi/memento/pkg/client/clientset/versioned"
	internalinterfaces "github.com/gugahoi/memento/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/gugahoi/memento/pkg/client/listers/memento/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// RegistryInformer provides access to a shared informer and lister for
// Registries.
type RegistryInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.RegistryLister
}

type registryInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewRegistryInformer constructs a new informer for Registry type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRegistryInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.MementoV1alpha1().Registries(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.MementoV1alpha1().Registries(namespace).Watch(options)
			},
		},
		&registry_v1alpha1.Registry{},
		resyncPeriod,
		indexers,
	)
}

func defaultRegistryInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewRegistryInformer(client, v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *registryInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&registry_v1alpha1.Registry{}, defaultRegistryInformer)
}

func (f *registryInformer) Lister() v1alpha1.RegistryLister {
	return v1alpha1.NewRegistryLister(f.Informer().GetIndexer())
}
